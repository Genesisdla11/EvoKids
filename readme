<!-- Sección para mostrar mensajes flash (éxito/error) -->
        <!-- EJS usa '<% if (...) { %>' para lógica condicional y '<%- variable %>' para imprimir HTML sin escapar -->
        <% if (messages.success && messages.success.length > 0) { %>
            <ul class="flashes">
                <li class="success"><%= messages.success[0] %></li>
            </ul>
        <% } %>
        <% if (messages.error && messages.error.length > 0) { %>
            <ul class="flashes">
                <li class="error"><%= messages.error[0] %></li>
            </ul>
        <% } %>

<!-- Esto estaba en el index pero no servia -->


const express = require ("express");                // Aqui se importa el modulo de express
const path = require ("path");                      // Importa el modulo path para trabajar con las rutas
const sqlite3 = require('sqlite3').verbose();       // Importar el driver de SQlite3
const session = require('express-session');         // Importar el express-session
const flash = require('connect-flash');             // Importar el connect-flash

//Iniciar la plicacion en express
const app = express();

//Puerto predeterminado donde se ejecuta el servidor 3000
const PORT = process.env.PORT || 3000;

// ---- CONFIGURACIÓN DE LAS BASES DE DATOS ----
// Crea o abre el archivo de la base de datos 'terapia.db' en la raíz del proyecto.

const db = new sqlite3.Database(path.join(__dirname, 'terapia.db'), (err) => {
    if (err) {
        // Si hay un error al abrir la base de datos, lo mostramos en consola.
        console.error('Error al abrir la base de datos:', err.message);
    } else {
        console.log('Conectado a la base de datos SQLite.');
        
        db.run(`CREATE TABLE IF NOT EXISTS usuarios (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            nombre_usuario TEXT UNIQUE NOT NULL,
            contrasena TEXT NOT NULL,
            es_padre INTEGER DEFAULT 0
        )`, (err) => {
            if (err) {
               
                console.error('Error al crear la tabla de usuarios:', err.message);
            } else {
                console.log('Tabla de usuarios verificada/creada.');
            }
        });
    }
});


// ---- CONFIGURACION DE EXPRESS ----

/*app.use(express.static(path.join(__dirname, "public")));*/  //REVISAR SI NO AFECTA LAS VISTAS

//Configurar el ejs como el motor de plantillas
app.set('view engine', 'ejs');

//Especificar la carpeta donde se encuentran las vistas (plantillas EJS).
app.set('views', path.join(__dirname, 'views'));

// Middleware para servir archivos estáticos. (Puente o intermediario de aplicaciones y componentes)
app.use(express.static(path.join(__dirname, 'public')));


app.use(express.urlencoded({ extended: true }));
// Middleware para parsear JSON (útil si más adelante se utilizan APIs REST)
app.use(express.json());

// ---- CONFIGURACION DE SESIONES ----

app.use(session({
    secret: 'genesislinares123', 
    saveUninitialized: true,
    cookie: { maxAge: 60 * 60 * 1000 } // La cookie de sesión expira en 1 hora (en milisegundos)
}));

// ---- CONFIGURACION DE MENSAJES FLASH ----
// Esto añade el método 'req.flash()' que podemos usar para establecer mensajes temporales.
app.use(flash());

// Middleware personalizado para pasar mensajes flash a todas las vistas.
// 'res.locals' es un objeto que contiene variables que estarán disponibles en todas las plantillas renderizadas.
app.use((req, res, next) => {
    res.locals.messages = req.flash(); // Copia los mensajes flash a 'res.locals.messages'

    // Determina si el usuario está autenticado basándose en si hay un 'userId' en la sesión.
    res.locals.isAuthenticated = req.session.userId ? true : false;

    next(); // Continúa con la siguiente función middleware o ruta
});

// --- Middleware de Autenticación (Protección de Rutas) ---
// Esta función se puede usar en cualquier ruta que requiera que el usuario esté logueado.
function isAuthenticated(req, res, next) {
    if (req.session.userId) {
        next(); // El usuario está autenticado, continuar con la siguiente función de la ruta
    } else {
        // Si no está autenticado, establece un mensaje de error y redirige al login.
        req.flash('error', 'Necesitas iniciar sesión para acceder a esta página.');
        res.redirect('/login');
    }
}



// ---- RUTAS DE LA APLICACION ----

app.get("/", (req , res) => {
    // En lugar de res.send usamos 'res.render()' para renderizar una plantilla EJS.
    // Respuesta al navergador 
    res.render('index.ejs');
});

// Ruta para mostrar el formulario de registro (método GET)

app.get('/register', (req, res) => {
    res.render('register')           // Renderiza la plantilla 'register.ejs'
})

// Ruta para procesar el envío del formulario de registro (método POST)

app.post('/register', (req, res) => {            // Obtener los datos enviados en el cuerpo de la solicitud POST.

    const { username, password, is_parent } = req.body
    // El checkbox envía 'on' si está marcado, o no envía nada si no lo está.
    // Lo convertimos a 1 (verdadero) o 0 (falso) para la base de datos SQLite.
    const es_padre = is_parent === 'on' ? 1 : 0;

    // --- Validaciones Básicas ---
    if (!username || !password) {
        // Si falta algún campo, usamos 'req.flash()' para establecer un mensaje de error.
        req.flash('Error', 'Por favor, completa todos los campos.');
        // Redirigimos al usuario de vuelta a la página de registro.
        return res.redirect('/register');
    } 
    
    // --- Verificar si el nombre de usuario ya existe ---
    // 'db.get()' se usa para obtener una sola fila de la base de datos.
    // El '?' es un placeholder para evitar inyección SQL.
    db.get('SELECT * FROM usuarios WHERE nombre_usuario = ?', [username], (err, row) => {
        if (err) {
            // Manejo de errores de la base de datos.
            console.error('Error al consultar usuario:', err.message);
            req.flash('error', 'Ocurrió un error en el servidor. Inténtalo de nuevo.');
            return res.redirect('/register');
        }
        if (row) {
            // Si 'row' existe, significa que ya hay un usuario con ese nombre.
            req.flash('error', 'El nombre de usuario ya existe. Por favor, elige otro.');
            return res.redirect('/register');
        }

        // --- Insertar nuevo usuario en la base de datos ---
        const insertSql = 'INSERT INTO usuarios (nombre_usuario, contrasena, es_padre) VALUES (?, ?, ?)';
        // 'db.run()' se usa para ejecutar comandos SQL que no devuelven filas (INSERT, UPDATE, DELETE).
        db.run(insertSql, [username, password, es_padre], function(err) {
            if (err) {
                console.error('Error al insertar usuario:', err.message);
                req.flash('error', 'Ocurrió un error al registrar el usuario. Inténtalo de nuevo.');
                return res.redirect('/register');
            }
            // 'this.lastID' contiene el ID de la última fila insertada.
            console.log(`Usuario ${username} registrado con ID: ${this.lastID}`);
            // Establecemos un mensaje de éxito.
            req.flash('success', '¡Registro exitoso! Ya puedes iniciar sesión.');
            // Redirigimos a la página de inicio.
            res.redirect('/');
        });
    });

    // Verificar si el nombre de usuario ya existe en la base de datos.
    db.get('SELECT * FROM usuarios WHERE nombre_usuario = ?', [username], (err, row) => {
        if (err) {
            console.error('Error al consultar usuario:', err.message);
            req.flash('error', 'Ocurrió un error en el servidor. Inténtalo de nuevo.');
            return res.redirect('/register');
        }
        if (row) {
            req.flash('error', 'El nombre de usuario ya existe. Por favor, elige otro.');
            return res.redirect('/register');
        }

        // --- IMPORTANTE: En una aplicación real, aquí deberías hashear la contraseña ---
        // Usar bcrypt para hashear la contraseña antes de guardarla.
        // Ejemplo (después de instalar 'bcrypt' con 'npm install bcrypt'):
        // const hashedPassword = bcrypt.hashSync(password, 10); // '10' es el número de rondas de salting
        // const insertSql = 'INSERT INTO usuarios (nombre_usuario, contrasena, es_padre) VALUES (?, ?, ?)';
        // db.run(insertSql, [username, hashedPassword, es_padre], function(err) { ... });

        // Por ahora, guardamos la contraseña en texto plano (SOLO PARA DESARROLLO).
        const insertSql = 'INSERT INTO usuarios (nombre_usuario, contrasena, es_padre) VALUES (?, ?, ?)';
        db.run(insertSql, [username, password, es_padre], function(err) {
            if (err) {
                console.error('Error al insertar usuario:', err.message);
                req.flash('error', 'Ocurrió un error al registrar el usuario. Inténtalo de nuevo.');
                return res.redirect('/register');
            }
            console.log(`Usuario ${username} registrado con ID: ${this.lastID}`);
            req.flash('success', '¡Registro exitoso! Ya puedes iniciar sesión.');
            res.redirect('/login'); // Redirige al login después del registro exitoso
        });
    });
});

// --- Rutas para Inicio de Sesión ---

// Ruta para mostrar el formulario de inicio de sesión (GET /login)
app.get('/login', (req, res) => {
    // Si el usuario ya está logueado, lo redirigimos al dashboard.
    if (req.session.userId) {
        return res.redirect('/dashboard');
    }
    res.render('login'); // Renderiza la plantilla 'login.ejs'
});


// Ruta para procesar el envío del formulario de inicio de sesión (POST /login)
app.post('/login', (req, res) => {
    const { username, password } = req.body;

    // Validaciones básicas de campos vacíos.
    if (!username || !password) {
        req.flash('error', 'Por favor, ingresa tu nombre de usuario y contraseña.');
        return res.redirect('/login');
    }

    // Buscar el usuario en la base de datos por nombre de usuario.
    db.get('SELECT * FROM usuarios WHERE nombre_usuario = ?', [username], (err, user) => {
        if (err) {
            console.error('Error al consultar usuario para login:', err.message);
            req.flash('error', 'Ocurrió un error en el servidor. Inténtalo de nuevo.');
            return res.redirect('/login');
        }

        // Si el usuario no existe O la contraseña no coincide.
        // --- IMPORTANTE: En una aplicación real, usarías bcrypt.compare(password, user.contrasena) aquí. ---
        if (!user || user.contrasena !== password) {
            req.flash('error', 'Nombre de usuario o contraseña incorrectos.');
            return res.redirect('/login');
        }

        // Inicio de sesión exitoso:
        // Guarda información del usuario en la sesión.
        req.session.userId = user.id;
        req.session.username = user.nombre_usuario;
        req.session.isParent = user.es_padre === 1; // Guarda el rol booleano

        req.flash('success', `¡Bienvenido, ${user.nombre_usuario}! Has iniciado sesión.`);
        console.log(`Usuario ${user.nombre_usuario} (ID: ${user.id}) ha iniciado sesión.`);
        res.redirect('/dashboard'); // Redirige al dashboard después de iniciar sesión
    });
});

// Ruta para cerrar sesión (GET /logout)
app.get('/logout', (req, res) => {
    // Destruye la sesión del usuario.
    req.session.destroy(err => {
        if (err) {
            console.error('Error al cerrar sesión:', err);
            req.flash('error', 'No se pudo cerrar la sesión correctamente.');
        } else {
            req.flash('success', 'Has cerrado sesión.');
        }
        res.redirect('/'); // Redirige a la página de inicio después de cerrar sesión
    });
});

// --- NUEVA RUTA: Dashboard (Ejemplo de página protegida) ---
// Esta ruta usa el middleware 'isAuthenticated' para asegurar que solo usuarios logueados accedan.
app.get('/dashboard', isAuthenticated, (req, res) => {
    // Renderiza la plantilla 'dashboard.ejs' y le pasa las variables de sesión.
    res.render('dashboard', {
        username: req.session.username,
        isParent: req.session.isParent
    });
});



// Inicia el servidor de express para enviar y recibir las solicitudes en el puerto

app.listen(PORT, () => {
    console.log(`Servidor ejecutándose en http://localhost:${PORT}`);
    console.log(`Ctrl+C para detener el servidor.`);
});

////colocar esto en index.ejs una vez que revise las correciones//////